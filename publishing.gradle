/*
 * Copyright (c) 2018 Android Pirates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

group = GROUP
version = VERSION_NAME


afterEvaluate { project ->
    android.libraryVariants.all { variant ->
        def javadocTask = task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            ext.androidJar = project.files(android.getBootClasspath().join(File.pathSeparator))
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            exclude '**/BuildConfig.java'
        }

        javadocTask.dependsOn variant.javaCompile

        def jarJavadocTask = task("jar${variant.name.capitalize()}Javadoc", type: Jar) {
            description "Generate Javadoc Jar for $variant.name"
            classifier = 'javadoc'
            from javadocTask.destinationDir
        }

        jarJavadocTask.dependsOn javadocTask
        artifacts.add('archives', jarJavadocTask)

        def jarSourceTask = task("jar${variant.name.capitalize()}Sources", type: Jar) {
            description "Generates Java Sources for $variant.name."
            classifier = 'sources'
            from variant.javaCompile.source
        }

        jarSourceTask.dependsOn variant.javaCompile
        artifacts.add('archives', jarSourceTask)
    }
}

signing {
    sign configurations.archives
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintray.user') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintray.apikey') ? project.property('bintray.apikey') : System.getenv('BINTRAY_API_KEY')

    configurations = ['archives']

    publish = true

    pkg {
        repo = REPO
        name = POM_ARTIFACT_ID
        vcsUrl = POM_VCS
        userOrg = POM_DEVELOPER_ORG
        publicDownloadNumbers = true

        version {
            name = VERSION_NAME

            gpg {
                sign = true
            }

            mavenCentralSync {
                sync = true
                user = hasProperty('NEXUS_USERNAME') ? sonatype_username : System.getenv('NEXUS_USERNAME')
                password = hasProperty('NEXUS_PASSWORD') ? sonatype_password : System.getenv('NEXUS_PASSWORD')
                close = '1'
            }
        }
    }
}